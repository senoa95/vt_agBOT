# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from novatel_gps_msgs/NovatelReceiverStatus.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class NovatelReceiverStatus(genpy.Message):
  _md5sum = "cf2774401808a6dde392e2ebdb09ca15"
  _type = "novatel_gps_msgs/NovatelReceiverStatus"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# From the original Novatel receiver status message bitfield
#  0     0x00000001   Error flag (Bit = 0: No Error, Bit = 1: Error)
#  1     0x00000002   Temperature Status (0: Within Spec, 1: Warning)
#  2     0x00000004   Voltage Supply Status (0: OK, 1: Warning)
#  3     0x00000008   Antenna Power Status (0: Powered, 1: Not Powered)
#  4     0x00000010   <Reserved>
#  5     0x00000020   Antenna open flag (0: OK, 1: Open)
#  6     0x00000040   Antenna shorted flag (0: OK, 1: Shorted)
#  7     0x00000080   CPU overload flag
#  8     0x00000100   COM1 buffer overrun flag (0: No overrun, 1: Overrun)
#  9     0x00000200   COM2 buffer overrun flag (0: No overrun, 1: Overrun)
#  10    0x00000400   COM3 buffer overrun flag (0: No overrun, 1: Overrun)
#  11    0x00000800   USB buffer overrun flag (0: No overrun, 1: Overrun)
#  12    0x00001000   <Reserved>
#  13    0x00002000   <Reserved>
#  14    0x00004000   <Reserved>
#  15    0x00008000   RF1 AGC Status (0: OK, 1: Bad)
#  16    0x00010000   <Reserverd>
#  17    0x00020000   RF2 AGC status (0: OK, 1: Bad)
#  18    0x00040000   Almanac flag/UTC known (0: Valid, 1: Invalid)
#  19    0x00080000   Position solution flag (0: Valid, 1: Invalid)
#  20    0x00100000   Position fixed flag (0: Not fixed, 1: Fixed)
#  21    0x00200000   Clock steering status (0: Enabled, 1: Disabled)
#  22    0x00400000   Clock model flag (0: Valid, 1: Invalid)
#  23    0x00800000   OEMV external oscillator flag (0: Disabled, 1: Enabled)
#  24    0x01000000   Software resource (0: OK, 1: Warning)
#  25    0x02000000   <Reserved>
#  26    0x04000000   <Reserved>
#  27    0x08000000   <Reserved>
#  28    0x10000000   <Reserved>
#  29    0x20000000   Auxiliary 3 status event flag (0: No event, 1: Event)
#  30    0x40000000   Auxiliary 2 status event flag (0: No event, 1: Event)
#  31    0x80000000   Auxiliary 1 status event flag (0: No event, 1: Event)
uint32 original_status_code
bool error_flag
bool temperature_flag
bool voltage_supply_flag
bool antenna_powered
bool antenna_is_open
bool antenna_is_shorted
bool cpu_overload_flag
bool com1_buffer_overrun
bool com2_buffer_overrun
bool com3_buffer_overrun
bool usb_buffer_overrun
bool rf1_agc_flag
bool rf2_agc_flag
bool almanac_flag
bool position_solution_flag
bool position_fixed_flag
bool clock_steering_status_enabled
bool clock_model_flag
bool oemv_external_oscillator_flag
bool software_resource_flag
bool aux1_status_event_flag
bool aux2_status_event_flag
bool aux3_status_event_flag

"""
  __slots__ = ['original_status_code','error_flag','temperature_flag','voltage_supply_flag','antenna_powered','antenna_is_open','antenna_is_shorted','cpu_overload_flag','com1_buffer_overrun','com2_buffer_overrun','com3_buffer_overrun','usb_buffer_overrun','rf1_agc_flag','rf2_agc_flag','almanac_flag','position_solution_flag','position_fixed_flag','clock_steering_status_enabled','clock_model_flag','oemv_external_oscillator_flag','software_resource_flag','aux1_status_event_flag','aux2_status_event_flag','aux3_status_event_flag']
  _slot_types = ['uint32','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       original_status_code,error_flag,temperature_flag,voltage_supply_flag,antenna_powered,antenna_is_open,antenna_is_shorted,cpu_overload_flag,com1_buffer_overrun,com2_buffer_overrun,com3_buffer_overrun,usb_buffer_overrun,rf1_agc_flag,rf2_agc_flag,almanac_flag,position_solution_flag,position_fixed_flag,clock_steering_status_enabled,clock_model_flag,oemv_external_oscillator_flag,software_resource_flag,aux1_status_event_flag,aux2_status_event_flag,aux3_status_event_flag

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(NovatelReceiverStatus, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.original_status_code is None:
        self.original_status_code = 0
      if self.error_flag is None:
        self.error_flag = False
      if self.temperature_flag is None:
        self.temperature_flag = False
      if self.voltage_supply_flag is None:
        self.voltage_supply_flag = False
      if self.antenna_powered is None:
        self.antenna_powered = False
      if self.antenna_is_open is None:
        self.antenna_is_open = False
      if self.antenna_is_shorted is None:
        self.antenna_is_shorted = False
      if self.cpu_overload_flag is None:
        self.cpu_overload_flag = False
      if self.com1_buffer_overrun is None:
        self.com1_buffer_overrun = False
      if self.com2_buffer_overrun is None:
        self.com2_buffer_overrun = False
      if self.com3_buffer_overrun is None:
        self.com3_buffer_overrun = False
      if self.usb_buffer_overrun is None:
        self.usb_buffer_overrun = False
      if self.rf1_agc_flag is None:
        self.rf1_agc_flag = False
      if self.rf2_agc_flag is None:
        self.rf2_agc_flag = False
      if self.almanac_flag is None:
        self.almanac_flag = False
      if self.position_solution_flag is None:
        self.position_solution_flag = False
      if self.position_fixed_flag is None:
        self.position_fixed_flag = False
      if self.clock_steering_status_enabled is None:
        self.clock_steering_status_enabled = False
      if self.clock_model_flag is None:
        self.clock_model_flag = False
      if self.oemv_external_oscillator_flag is None:
        self.oemv_external_oscillator_flag = False
      if self.software_resource_flag is None:
        self.software_resource_flag = False
      if self.aux1_status_event_flag is None:
        self.aux1_status_event_flag = False
      if self.aux2_status_event_flag is None:
        self.aux2_status_event_flag = False
      if self.aux3_status_event_flag is None:
        self.aux3_status_event_flag = False
    else:
      self.original_status_code = 0
      self.error_flag = False
      self.temperature_flag = False
      self.voltage_supply_flag = False
      self.antenna_powered = False
      self.antenna_is_open = False
      self.antenna_is_shorted = False
      self.cpu_overload_flag = False
      self.com1_buffer_overrun = False
      self.com2_buffer_overrun = False
      self.com3_buffer_overrun = False
      self.usb_buffer_overrun = False
      self.rf1_agc_flag = False
      self.rf2_agc_flag = False
      self.almanac_flag = False
      self.position_solution_flag = False
      self.position_fixed_flag = False
      self.clock_steering_status_enabled = False
      self.clock_model_flag = False
      self.oemv_external_oscillator_flag = False
      self.software_resource_flag = False
      self.aux1_status_event_flag = False
      self.aux2_status_event_flag = False
      self.aux3_status_event_flag = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_I23B().pack(_x.original_status_code, _x.error_flag, _x.temperature_flag, _x.voltage_supply_flag, _x.antenna_powered, _x.antenna_is_open, _x.antenna_is_shorted, _x.cpu_overload_flag, _x.com1_buffer_overrun, _x.com2_buffer_overrun, _x.com3_buffer_overrun, _x.usb_buffer_overrun, _x.rf1_agc_flag, _x.rf2_agc_flag, _x.almanac_flag, _x.position_solution_flag, _x.position_fixed_flag, _x.clock_steering_status_enabled, _x.clock_model_flag, _x.oemv_external_oscillator_flag, _x.software_resource_flag, _x.aux1_status_event_flag, _x.aux2_status_event_flag, _x.aux3_status_event_flag))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 27
      (_x.original_status_code, _x.error_flag, _x.temperature_flag, _x.voltage_supply_flag, _x.antenna_powered, _x.antenna_is_open, _x.antenna_is_shorted, _x.cpu_overload_flag, _x.com1_buffer_overrun, _x.com2_buffer_overrun, _x.com3_buffer_overrun, _x.usb_buffer_overrun, _x.rf1_agc_flag, _x.rf2_agc_flag, _x.almanac_flag, _x.position_solution_flag, _x.position_fixed_flag, _x.clock_steering_status_enabled, _x.clock_model_flag, _x.oemv_external_oscillator_flag, _x.software_resource_flag, _x.aux1_status_event_flag, _x.aux2_status_event_flag, _x.aux3_status_event_flag,) = _get_struct_I23B().unpack(str[start:end])
      self.error_flag = bool(self.error_flag)
      self.temperature_flag = bool(self.temperature_flag)
      self.voltage_supply_flag = bool(self.voltage_supply_flag)
      self.antenna_powered = bool(self.antenna_powered)
      self.antenna_is_open = bool(self.antenna_is_open)
      self.antenna_is_shorted = bool(self.antenna_is_shorted)
      self.cpu_overload_flag = bool(self.cpu_overload_flag)
      self.com1_buffer_overrun = bool(self.com1_buffer_overrun)
      self.com2_buffer_overrun = bool(self.com2_buffer_overrun)
      self.com3_buffer_overrun = bool(self.com3_buffer_overrun)
      self.usb_buffer_overrun = bool(self.usb_buffer_overrun)
      self.rf1_agc_flag = bool(self.rf1_agc_flag)
      self.rf2_agc_flag = bool(self.rf2_agc_flag)
      self.almanac_flag = bool(self.almanac_flag)
      self.position_solution_flag = bool(self.position_solution_flag)
      self.position_fixed_flag = bool(self.position_fixed_flag)
      self.clock_steering_status_enabled = bool(self.clock_steering_status_enabled)
      self.clock_model_flag = bool(self.clock_model_flag)
      self.oemv_external_oscillator_flag = bool(self.oemv_external_oscillator_flag)
      self.software_resource_flag = bool(self.software_resource_flag)
      self.aux1_status_event_flag = bool(self.aux1_status_event_flag)
      self.aux2_status_event_flag = bool(self.aux2_status_event_flag)
      self.aux3_status_event_flag = bool(self.aux3_status_event_flag)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_I23B().pack(_x.original_status_code, _x.error_flag, _x.temperature_flag, _x.voltage_supply_flag, _x.antenna_powered, _x.antenna_is_open, _x.antenna_is_shorted, _x.cpu_overload_flag, _x.com1_buffer_overrun, _x.com2_buffer_overrun, _x.com3_buffer_overrun, _x.usb_buffer_overrun, _x.rf1_agc_flag, _x.rf2_agc_flag, _x.almanac_flag, _x.position_solution_flag, _x.position_fixed_flag, _x.clock_steering_status_enabled, _x.clock_model_flag, _x.oemv_external_oscillator_flag, _x.software_resource_flag, _x.aux1_status_event_flag, _x.aux2_status_event_flag, _x.aux3_status_event_flag))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 27
      (_x.original_status_code, _x.error_flag, _x.temperature_flag, _x.voltage_supply_flag, _x.antenna_powered, _x.antenna_is_open, _x.antenna_is_shorted, _x.cpu_overload_flag, _x.com1_buffer_overrun, _x.com2_buffer_overrun, _x.com3_buffer_overrun, _x.usb_buffer_overrun, _x.rf1_agc_flag, _x.rf2_agc_flag, _x.almanac_flag, _x.position_solution_flag, _x.position_fixed_flag, _x.clock_steering_status_enabled, _x.clock_model_flag, _x.oemv_external_oscillator_flag, _x.software_resource_flag, _x.aux1_status_event_flag, _x.aux2_status_event_flag, _x.aux3_status_event_flag,) = _get_struct_I23B().unpack(str[start:end])
      self.error_flag = bool(self.error_flag)
      self.temperature_flag = bool(self.temperature_flag)
      self.voltage_supply_flag = bool(self.voltage_supply_flag)
      self.antenna_powered = bool(self.antenna_powered)
      self.antenna_is_open = bool(self.antenna_is_open)
      self.antenna_is_shorted = bool(self.antenna_is_shorted)
      self.cpu_overload_flag = bool(self.cpu_overload_flag)
      self.com1_buffer_overrun = bool(self.com1_buffer_overrun)
      self.com2_buffer_overrun = bool(self.com2_buffer_overrun)
      self.com3_buffer_overrun = bool(self.com3_buffer_overrun)
      self.usb_buffer_overrun = bool(self.usb_buffer_overrun)
      self.rf1_agc_flag = bool(self.rf1_agc_flag)
      self.rf2_agc_flag = bool(self.rf2_agc_flag)
      self.almanac_flag = bool(self.almanac_flag)
      self.position_solution_flag = bool(self.position_solution_flag)
      self.position_fixed_flag = bool(self.position_fixed_flag)
      self.clock_steering_status_enabled = bool(self.clock_steering_status_enabled)
      self.clock_model_flag = bool(self.clock_model_flag)
      self.oemv_external_oscillator_flag = bool(self.oemv_external_oscillator_flag)
      self.software_resource_flag = bool(self.software_resource_flag)
      self.aux1_status_event_flag = bool(self.aux1_status_event_flag)
      self.aux2_status_event_flag = bool(self.aux2_status_event_flag)
      self.aux3_status_event_flag = bool(self.aux3_status_event_flag)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_I23B = None
def _get_struct_I23B():
    global _struct_I23B
    if _struct_I23B is None:
        _struct_I23B = struct.Struct("<I23B")
    return _struct_I23B
