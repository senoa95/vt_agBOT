// Generated by gencpp from file joy_input/AckermannDrive.msg
// DO NOT EDIT!


#ifndef JOY_INPUT_MESSAGE_ACKERMANNDRIVE_H
#define JOY_INPUT_MESSAGE_ACKERMANNDRIVE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace joy_input
{
template <class ContainerAllocator>
struct AckermannDrive_
{
  typedef AckermannDrive_<ContainerAllocator> Type;

  AckermannDrive_()
    : steering_angle(0.0)
    , steering_angle_velocity(0.0)
    , speed(0.0)
    , acceleration(0.0)
    , jerk(0.0)  {
    }
  AckermannDrive_(const ContainerAllocator& _alloc)
    : steering_angle(0.0)
    , steering_angle_velocity(0.0)
    , speed(0.0)
    , acceleration(0.0)
    , jerk(0.0)  {
  (void)_alloc;
    }



   typedef float _steering_angle_type;
  _steering_angle_type steering_angle;

   typedef float _steering_angle_velocity_type;
  _steering_angle_velocity_type steering_angle_velocity;

   typedef float _speed_type;
  _speed_type speed;

   typedef float _acceleration_type;
  _acceleration_type acceleration;

   typedef float _jerk_type;
  _jerk_type jerk;




  typedef boost::shared_ptr< ::joy_input::AckermannDrive_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::joy_input::AckermannDrive_<ContainerAllocator> const> ConstPtr;

}; // struct AckermannDrive_

typedef ::joy_input::AckermannDrive_<std::allocator<void> > AckermannDrive;

typedef boost::shared_ptr< ::joy_input::AckermannDrive > AckermannDrivePtr;
typedef boost::shared_ptr< ::joy_input::AckermannDrive const> AckermannDriveConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::joy_input::AckermannDrive_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::joy_input::AckermannDrive_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace joy_input

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'joy_input': ['/home/agcommand/vt_agBOT/src/joystick_input/msg'], 'actionlib': ['/opt/ros/kinetic/share/actionlib/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'move_base_msgs': ['/opt/ros/kinetic/share/move_base_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::joy_input::AckermannDrive_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::joy_input::AckermannDrive_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::joy_input::AckermannDrive_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::joy_input::AckermannDrive_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::joy_input::AckermannDrive_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::joy_input::AckermannDrive_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::joy_input::AckermannDrive_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3512e91b48d69674a0e86fadf1ea8231";
  }

  static const char* value(const ::joy_input::AckermannDrive_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3512e91b48d69674ULL;
  static const uint64_t static_value2 = 0xa0e86fadf1ea8231ULL;
};

template<class ContainerAllocator>
struct DataType< ::joy_input::AckermannDrive_<ContainerAllocator> >
{
  static const char* value()
  {
    return "joy_input/AckermannDrive";
  }

  static const char* value(const ::joy_input::AckermannDrive_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::joy_input::AckermannDrive_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 steering_angle         \n\
float32 steering_angle_velocity \n\
float32 speed                   \n\
float32 acceleration        \n\
float32 jerk                    \n\
\n\
";
  }

  static const char* value(const ::joy_input::AckermannDrive_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::joy_input::AckermannDrive_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.steering_angle);
      stream.next(m.steering_angle_velocity);
      stream.next(m.speed);
      stream.next(m.acceleration);
      stream.next(m.jerk);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AckermannDrive_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::joy_input::AckermannDrive_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::joy_input::AckermannDrive_<ContainerAllocator>& v)
  {
    s << indent << "steering_angle: ";
    Printer<float>::stream(s, indent + "  ", v.steering_angle);
    s << indent << "steering_angle_velocity: ";
    Printer<float>::stream(s, indent + "  ", v.steering_angle_velocity);
    s << indent << "speed: ";
    Printer<float>::stream(s, indent + "  ", v.speed);
    s << indent << "acceleration: ";
    Printer<float>::stream(s, indent + "  ", v.acceleration);
    s << indent << "jerk: ";
    Printer<float>::stream(s, indent + "  ", v.jerk);
  }
};

} // namespace message_operations
} // namespace ros

#endif // JOY_INPUT_MESSAGE_ACKERMANNDRIVE_H
