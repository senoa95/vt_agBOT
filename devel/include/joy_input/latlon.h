// Generated by gencpp from file joy_input/latlon.msg
// DO NOT EDIT!


#ifndef JOY_INPUT_MESSAGE_LATLON_H
#define JOY_INPUT_MESSAGE_LATLON_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace joy_input
{
template <class ContainerAllocator>
struct latlon_
{
  typedef latlon_<ContainerAllocator> Type;

  latlon_()
    : lat(0.0)
    , long(0.0)
    , header(0.0)  {
    }
  latlon_(const ContainerAllocator& _alloc)
    : lat(0.0)
    , long(0.0)
    , header(0.0)  {
  (void)_alloc;
    }



   typedef double _lat_type;
  _lat_type lat;

   typedef double _long_type;
  _long_type long;

   typedef double _header_type;
  _header_type header;





  typedef boost::shared_ptr< ::joy_input::latlon_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::joy_input::latlon_<ContainerAllocator> const> ConstPtr;

}; // struct latlon_

typedef ::joy_input::latlon_<std::allocator<void> > latlon;

typedef boost::shared_ptr< ::joy_input::latlon > latlonPtr;
typedef boost::shared_ptr< ::joy_input::latlon const> latlonConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::joy_input::latlon_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::joy_input::latlon_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace joy_input

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'joy_input': ['/home/senoa95/vt_agBOT/src/joystick_input/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::joy_input::latlon_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::joy_input::latlon_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::joy_input::latlon_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::joy_input::latlon_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::joy_input::latlon_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::joy_input::latlon_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::joy_input::latlon_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f528864ac4e46104edf4aafff46f9d1a";
  }

  static const char* value(const ::joy_input::latlon_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf528864ac4e46104ULL;
  static const uint64_t static_value2 = 0xedf4aafff46f9d1aULL;
};

template<class ContainerAllocator>
struct DataType< ::joy_input::latlon_<ContainerAllocator> >
{
  static const char* value()
  {
    return "joy_input/latlon";
  }

  static const char* value(const ::joy_input::latlon_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::joy_input::latlon_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 lat\n\
float64 long\n\
float64 header\n\
";
  }

  static const char* value(const ::joy_input::latlon_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::joy_input::latlon_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.lat);
      stream.next(m.long);
      stream.next(m.header);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct latlon_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::joy_input::latlon_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::joy_input::latlon_<ContainerAllocator>& v)
  {
    s << indent << "lat: ";
    Printer<double>::stream(s, indent + "  ", v.lat);
    s << indent << "long: ";
    Printer<double>::stream(s, indent + "  ", v.long);
    s << indent << "header: ";
    Printer<double>::stream(s, indent + "  ", v.header);
  }
};

} // namespace message_operations
} // namespace ros

#endif // JOY_INPUT_MESSAGE_LATLON_H
