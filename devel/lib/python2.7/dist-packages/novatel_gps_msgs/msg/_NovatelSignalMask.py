# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from novatel_gps_msgs/NovatelSignalMask.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class NovatelSignalMask(genpy.Message):
  _md5sum = "007d687355f8f3c12ea4e18109172710"
  _type = "novatel_gps_msgs/NovatelSignalMask"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# Bit    Mask      Description
#  0     0x01      GPS L1 used in Solution
#  1     0x02      GPS L2 used in Solution
#  2     0x04      GPS L5 used in Solution
#  3     0x08      <Reserved>
#  4     0x10      GLONASS L1 used in Solution
#  5     0x20      GLONASS L2 used in Solution
# 6-7  0x40-0x80   <Reserved>
uint32 original_mask
bool gps_L1_used_in_solution
bool gps_L2_used_in_solution
bool gps_L3_used_in_solution
bool glonass_L1_used_in_solution
bool glonass_L2_used_in_solution"""
  __slots__ = ['original_mask','gps_L1_used_in_solution','gps_L2_used_in_solution','gps_L3_used_in_solution','glonass_L1_used_in_solution','glonass_L2_used_in_solution']
  _slot_types = ['uint32','bool','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       original_mask,gps_L1_used_in_solution,gps_L2_used_in_solution,gps_L3_used_in_solution,glonass_L1_used_in_solution,glonass_L2_used_in_solution

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(NovatelSignalMask, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.original_mask is None:
        self.original_mask = 0
      if self.gps_L1_used_in_solution is None:
        self.gps_L1_used_in_solution = False
      if self.gps_L2_used_in_solution is None:
        self.gps_L2_used_in_solution = False
      if self.gps_L3_used_in_solution is None:
        self.gps_L3_used_in_solution = False
      if self.glonass_L1_used_in_solution is None:
        self.glonass_L1_used_in_solution = False
      if self.glonass_L2_used_in_solution is None:
        self.glonass_L2_used_in_solution = False
    else:
      self.original_mask = 0
      self.gps_L1_used_in_solution = False
      self.gps_L2_used_in_solution = False
      self.gps_L3_used_in_solution = False
      self.glonass_L1_used_in_solution = False
      self.glonass_L2_used_in_solution = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_I5B().pack(_x.original_mask, _x.gps_L1_used_in_solution, _x.gps_L2_used_in_solution, _x.gps_L3_used_in_solution, _x.glonass_L1_used_in_solution, _x.glonass_L2_used_in_solution))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 9
      (_x.original_mask, _x.gps_L1_used_in_solution, _x.gps_L2_used_in_solution, _x.gps_L3_used_in_solution, _x.glonass_L1_used_in_solution, _x.glonass_L2_used_in_solution,) = _get_struct_I5B().unpack(str[start:end])
      self.gps_L1_used_in_solution = bool(self.gps_L1_used_in_solution)
      self.gps_L2_used_in_solution = bool(self.gps_L2_used_in_solution)
      self.gps_L3_used_in_solution = bool(self.gps_L3_used_in_solution)
      self.glonass_L1_used_in_solution = bool(self.glonass_L1_used_in_solution)
      self.glonass_L2_used_in_solution = bool(self.glonass_L2_used_in_solution)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_I5B().pack(_x.original_mask, _x.gps_L1_used_in_solution, _x.gps_L2_used_in_solution, _x.gps_L3_used_in_solution, _x.glonass_L1_used_in_solution, _x.glonass_L2_used_in_solution))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 9
      (_x.original_mask, _x.gps_L1_used_in_solution, _x.gps_L2_used_in_solution, _x.gps_L3_used_in_solution, _x.glonass_L1_used_in_solution, _x.glonass_L2_used_in_solution,) = _get_struct_I5B().unpack(str[start:end])
      self.gps_L1_used_in_solution = bool(self.gps_L1_used_in_solution)
      self.gps_L2_used_in_solution = bool(self.gps_L2_used_in_solution)
      self.gps_L3_used_in_solution = bool(self.gps_L3_used_in_solution)
      self.glonass_L1_used_in_solution = bool(self.glonass_L1_used_in_solution)
      self.glonass_L2_used_in_solution = bool(self.glonass_L2_used_in_solution)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_I5B = None
def _get_struct_I5B():
    global _struct_I5B
    if _struct_I5B is None:
        _struct_I5B = struct.Struct("<I5B")
    return _struct_I5B
