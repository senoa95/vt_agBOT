# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from novatel_gps_msgs/TrackstatChannel.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class TrackstatChannel(genpy.Message):
  _md5sum = "295831118c5ddfb83ac5b655586ae7ef"
  _type = "novatel_gps_msgs/TrackstatChannel"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# A submessage of Trackstat that contains all of the data about a single hardware channel

# Satellite PRN number
int16 prn

# GLONASS Frequency +7
int16 glofreq

# Channel tracking status
uint32 ch_tr_status

# Pseudorange (m)
float64 psr

# Doppler frequency (Hz)
float32 doppler

# Carrier to noise density ratio (dB-Hz)
float32 c_no

# Number of seconds of continuous tracking (no cycle slips)
float32 locktime

# Pseudorange residual from pseudorange filter (m)
float32 psr_res

# Range reject code from pseudorange filter
string reject

# Pseudorange filter weighting
float32 psr_weight"""
  __slots__ = ['prn','glofreq','ch_tr_status','psr','doppler','c_no','locktime','psr_res','reject','psr_weight']
  _slot_types = ['int16','int16','uint32','float64','float32','float32','float32','float32','string','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       prn,glofreq,ch_tr_status,psr,doppler,c_no,locktime,psr_res,reject,psr_weight

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(TrackstatChannel, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.prn is None:
        self.prn = 0
      if self.glofreq is None:
        self.glofreq = 0
      if self.ch_tr_status is None:
        self.ch_tr_status = 0
      if self.psr is None:
        self.psr = 0.
      if self.doppler is None:
        self.doppler = 0.
      if self.c_no is None:
        self.c_no = 0.
      if self.locktime is None:
        self.locktime = 0.
      if self.psr_res is None:
        self.psr_res = 0.
      if self.reject is None:
        self.reject = ''
      if self.psr_weight is None:
        self.psr_weight = 0.
    else:
      self.prn = 0
      self.glofreq = 0
      self.ch_tr_status = 0
      self.psr = 0.
      self.doppler = 0.
      self.c_no = 0.
      self.locktime = 0.
      self.psr_res = 0.
      self.reject = ''
      self.psr_weight = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2hId4f().pack(_x.prn, _x.glofreq, _x.ch_tr_status, _x.psr, _x.doppler, _x.c_no, _x.locktime, _x.psr_res))
      _x = self.reject
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_f().pack(self.psr_weight))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 32
      (_x.prn, _x.glofreq, _x.ch_tr_status, _x.psr, _x.doppler, _x.c_no, _x.locktime, _x.psr_res,) = _get_struct_2hId4f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.reject = str[start:end].decode('utf-8')
      else:
        self.reject = str[start:end]
      start = end
      end += 4
      (self.psr_weight,) = _get_struct_f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2hId4f().pack(_x.prn, _x.glofreq, _x.ch_tr_status, _x.psr, _x.doppler, _x.c_no, _x.locktime, _x.psr_res))
      _x = self.reject
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_f().pack(self.psr_weight))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 32
      (_x.prn, _x.glofreq, _x.ch_tr_status, _x.psr, _x.doppler, _x.c_no, _x.locktime, _x.psr_res,) = _get_struct_2hId4f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.reject = str[start:end].decode('utf-8')
      else:
        self.reject = str[start:end]
      start = end
      end += 4
      (self.psr_weight,) = _get_struct_f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2hId4f = None
def _get_struct_2hId4f():
    global _struct_2hId4f
    if _struct_2hId4f is None:
        _struct_2hId4f = struct.Struct("<2hId4f")
    return _struct_2hId4f
_struct_f = None
def _get_struct_f():
    global _struct_f
    if _struct_f is None:
        _struct_f = struct.Struct("<f")
    return _struct_f
